$date
	Sat Aug 17 14:00:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 1 $ StallF $end
$var wire 1 % StallD $end
$var wire 32 & ResultW [31:0] $end
$var wire 1 ' ResultSrcW $end
$var wire 1 ( ResultSrcM $end
$var wire 1 ) ResultSrcE $end
$var wire 1 * RegWriteW $end
$var wire 1 + RegWriteM $end
$var wire 1 , RegWriteE $end
$var wire 32 - ReadDataW [31:0] $end
$var wire 5 . RS2_E [4:0] $end
$var wire 5 / RS2_D [4:0] $end
$var wire 5 0 RS1_E [4:0] $end
$var wire 5 1 RS1_D [4:0] $end
$var wire 5 2 RD_W [4:0] $end
$var wire 5 3 RD_M [4:0] $end
$var wire 5 4 RD_E [4:0] $end
$var wire 32 5 RD2_E [31:0] $end
$var wire 32 6 RD1_E [31:0] $end
$var wire 32 7 PCTargetE [31:0] $end
$var wire 1 8 PCSrcE $end
$var wire 32 9 PCPlus4W [31:0] $end
$var wire 32 : PCPlus4M [31:0] $end
$var wire 32 ; PCPlus4E [31:0] $end
$var wire 32 < PCPlus4D [31:0] $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCD [31:0] $end
$var wire 1 ? MemWriteM $end
$var wire 1 @ MemWriteE $end
$var wire 32 A InstrD [31:0] $end
$var wire 32 B Imm_Ext_E [31:0] $end
$var wire 2 C ForwardBE [1:0] $end
$var wire 2 D ForwardAE [1:0] $end
$var wire 1 E FlushE $end
$var wire 1 F BranchE $end
$var wire 32 G ALU_ResultW [31:0] $end
$var wire 32 H ALU_ResultM [31:0] $end
$var wire 1 I ALUSrcE $end
$var wire 3 J ALUControlE [2:0] $end
$scope module Forwarding_block $end
$var wire 1 " rst $end
$var wire 1 * RegWriteW $end
$var wire 1 + RegWriteM $end
$var wire 5 K RS2_E [4:0] $end
$var wire 5 L RS1_E [4:0] $end
$var wire 5 M RD_W [4:0] $end
$var wire 5 N RD_M [4:0] $end
$var wire 2 O ForwardBE [1:0] $end
$var wire 2 P ForwardAE [1:0] $end
$upscope $end
$scope module decode $end
$var wire 3 Q ALUControlE [2:0] $end
$var wire 1 I ALUSrcE $end
$var wire 1 F BranchE $end
$var wire 32 R Imm_Ext_E [31:0] $end
$var wire 1 @ MemWriteE $end
$var wire 32 S PCE [31:0] $end
$var wire 32 T PCPlus4E [31:0] $end
$var wire 32 U RD1_E [31:0] $end
$var wire 32 V RD2_E [31:0] $end
$var wire 5 W RS1_D [4:0] $end
$var wire 5 X RS1_E [4:0] $end
$var wire 5 Y RS2_D [4:0] $end
$var wire 5 Z RS2_E [4:0] $end
$var wire 1 , RegWriteE $end
$var wire 1 ) ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 [ ResultW [31:0] $end
$var wire 1 \ ResultSrcD $end
$var wire 1 * RegWriteW $end
$var wire 1 ] RegWriteD $end
$var wire 5 ^ RD_W [4:0] $end
$var wire 5 _ RD_E [4:0] $end
$var wire 32 ` RD2_D [31:0] $end
$var wire 32 a RD1_D [31:0] $end
$var wire 32 b PCPlus4D [31:0] $end
$var wire 32 c PCD [31:0] $end
$var wire 1 d MemWriteD $end
$var wire 32 e InstrD [31:0] $end
$var wire 32 f Imm_Ext_D [31:0] $end
$var wire 2 g ImmSrcD [1:0] $end
$var wire 1 E FlushE $end
$var wire 1 h BranchD $end
$var wire 1 i ALUSrcD $end
$var wire 3 j ALUControlD [2:0] $end
$var reg 3 k ALUControlD_r [2:0] $end
$var reg 1 I ALUSrcD_r $end
$var reg 1 F BranchD_r $end
$var reg 32 l Imm_Ext_D_r [31:0] $end
$var reg 1 m MemWriteD_r $end
$var reg 32 n PCD_r [31:0] $end
$var reg 32 o PCPlus4D_r [31:0] $end
$var reg 32 p RD1_D_r [31:0] $end
$var reg 32 q RD2_D_r [31:0] $end
$var reg 5 r RD_r [4:0] $end
$var reg 5 s RS1_D_r [4:0] $end
$var reg 5 t RS2_D_r [4:0] $end
$var reg 1 u RegWriteD_r $end
$var reg 1 ) ResultSrcD_r $end
$scope module control $end
$var wire 3 v func3 [2:0] $end
$var wire 7 w func7 [6:0] $end
$var wire 7 x op [6:0] $end
$var wire 1 \ ResultSrc $end
$var wire 1 ] RegWrite $end
$var wire 1 d MemWrite $end
$var wire 2 y ImmSrc [1:0] $end
$var wire 1 h Branch $end
$var wire 1 i ALUSrc $end
$var wire 2 z ALUOp [1:0] $end
$var wire 3 { ALUControl [2:0] $end
$scope module Alu $end
$var wire 3 | func3 [2:0] $end
$var wire 7 } func7 [6:0] $end
$var wire 7 ~ op [6:0] $end
$var wire 2 !" ALUOp [1:0] $end
$var wire 3 "" ALUControl [2:0] $end
$upscope $end
$scope module main $end
$var wire 1 #" PCSrc $end
$var wire 1 $" Zero $end
$var wire 7 %" op [6:0] $end
$var wire 1 \ ResultSrc $end
$var wire 1 ] RegWrite $end
$var wire 1 d MemWrite $end
$var wire 2 &" ImmSrc [1:0] $end
$var wire 1 h Branch $end
$var wire 1 i ALUSrc $end
$var wire 2 '" ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module register $end
$var wire 5 (" A1 [4:0] $end
$var wire 5 )" A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 * WE3 $end
$var wire 32 *" WD3 [31:0] $end
$var wire 32 +" RD2 [31:0] $end
$var wire 32 ," RD1 [31:0] $end
$var wire 5 -" A3 [4:0] $end
$var integer 32 ." i [31:0] $end
$upscope $end
$scope module sign $end
$var wire 2 /" ImmSrc [1:0] $end
$var wire 32 0" In [31:0] $end
$var wire 32 1" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module execute $end
$var wire 3 2" ALUControlE [2:0] $end
$var wire 1 I ALUSrcE $end
$var wire 1 F BranchE $end
$var wire 2 3" ForwardAE [1:0] $end
$var wire 2 4" ForwardBE [1:0] $end
$var wire 32 5" Imm_Ext_E [31:0] $end
$var wire 1 @ MemWriteE $end
$var wire 1 ? MemWriteM $end
$var wire 32 6" PCE [31:0] $end
$var wire 32 7" PCPlus4E [31:0] $end
$var wire 32 8" PCPlus4M [31:0] $end
$var wire 1 8 PCSrcE $end
$var wire 32 9" RD1_E [31:0] $end
$var wire 32 :" RD2_E [31:0] $end
$var wire 5 ;" RD_E [4:0] $end
$var wire 5 <" RD_M [4:0] $end
$var wire 1 , RegWriteE $end
$var wire 1 + RegWriteM $end
$var wire 1 ) ResultSrcE $end
$var wire 32 =" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 >" ZeroE $end
$var wire 32 ?" Scr_B_interim [31:0] $end
$var wire 32 @" Scr_B [31:0] $end
$var wire 32 A" Scr_A [31:0] $end
$var wire 32 B" Result_E [31:0] $end
$var wire 32 C" ResultW [31:0] $end
$var wire 1 ( ResultSrcM $end
$var wire 32 D" PCTargetE [31:0] $end
$var wire 32 E" ALU_ResultM [31:0] $end
$var reg 1 ? MemWriteE_r $end
$var reg 32 F" PCPlus4E_r [31:0] $end
$var reg 32 G" RD2_E_r [31:0] $end
$var reg 5 H" RD_E_r [4:0] $end
$var reg 1 + RegWriteE_r $end
$var reg 2 I" ResultSrcE_r [1:0] $end
$var reg 32 J" Result_E_r [31:0] $end
$scope module alu $end
$var wire 3 K" ALUControl [2:0] $end
$var wire 32 L" A_and_B [31:0] $end
$var wire 32 M" A_or_B [31:0] $end
$var wire 1 N" C $end
$var wire 32 O" Result [31:0] $end
$var wire 1 P" V $end
$var wire 32 Q" not_B [31:0] $end
$var wire 32 R" sum [31:0] $end
$var wire 32 S" slt [31:0] $end
$var wire 32 T" mux_2 [31:0] $end
$var wire 32 U" mux_1 [31:0] $end
$var wire 1 V" cout $end
$var wire 1 >" Z $end
$var wire 1 W" N $end
$var wire 32 X" B [31:0] $end
$var wire 32 Y" A [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 Z" b [31:0] $end
$var wire 1 I s $end
$var wire 32 [" c [31:0] $end
$var wire 32 \" a [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 ]" a [31:0] $end
$var wire 32 ^" b [31:0] $end
$var wire 32 _" c [31:0] $end
$upscope $end
$scope module srcA $end
$var wire 32 `" a [31:0] $end
$var wire 32 a" c [31:0] $end
$var wire 2 b" s [1:0] $end
$var wire 32 c" d [31:0] $end
$var wire 32 d" b [31:0] $end
$upscope $end
$scope module srcB $end
$var wire 32 e" a [31:0] $end
$var wire 32 f" c [31:0] $end
$var wire 2 g" s [1:0] $end
$var wire 32 h" d [31:0] $end
$var wire 32 i" b [31:0] $end
$upscope $end
$upscope $end
$scope module fetch $end
$var wire 1 j" EN1 $end
$var wire 1 k" EN2 $end
$var wire 1 8 PCSrcE $end
$var wire 32 l" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 m" PC_F [31:0] $end
$var wire 32 n" PCPlus4F [31:0] $end
$var wire 32 o" PCPlus4D [31:0] $end
$var wire 32 p" PCF [31:0] $end
$var wire 32 q" PCD [31:0] $end
$var wire 32 r" InstrF [31:0] $end
$var wire 32 s" InstrD [31:0] $end
$var reg 32 t" InstrF_reg [31:0] $end
$var reg 32 u" PCF_reg [31:0] $end
$var reg 32 v" PCPlus4F_reg [31:0] $end
$scope module PC_mux $end
$var wire 32 w" b [31:0] $end
$var wire 1 8 s $end
$var wire 32 x" c [31:0] $end
$var wire 32 y" a [31:0] $end
$upscope $end
$scope module instruction $end
$var wire 1 z" clk $end
$var wire 1 " rst $end
$var wire 32 {" RD [31:0] $end
$var wire 32 |" A [31:0] $end
$upscope $end
$scope module pc $end
$var wire 32 }" b [31:0] $end
$var wire 32 ~" c [31:0] $end
$var wire 32 !# a [31:0] $end
$upscope $end
$scope module program $end
$var wire 1 j" EN $end
$var wire 32 "# PC_NEXT [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 ## PC [31:0] $end
$upscope $end
$upscope $end
$scope module memory $end
$var wire 32 $# ALU_ResultM [31:0] $end
$var wire 32 %# ALU_ResultW [31:0] $end
$var wire 1 ? MemWriteM $end
$var wire 32 &# PCPlus4M [31:0] $end
$var wire 32 '# PCPlus4W [31:0] $end
$var wire 5 (# RD_M [4:0] $end
$var wire 5 )# RD_W [4:0] $end
$var wire 32 *# ReadDataW [31:0] $end
$var wire 1 + RegWriteM $end
$var wire 1 * RegWriteW $end
$var wire 1 ( ResultSrcM $end
$var wire 1 ' ResultSrcW $end
$var wire 32 +# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ,# ReadDataM [31:0] $end
$var reg 32 -# ALU_ResultM_r [31:0] $end
$var reg 32 .# PCPlus4M_r [31:0] $end
$var reg 5 /# RD_M_r [4:0] $end
$var reg 32 0# ReadDataM_r [31:0] $end
$var reg 1 * RegWriteM_r $end
$var reg 1 ' ResultSrcM_r $end
$scope module data $end
$var wire 32 1# A [31:0] $end
$var wire 32 2# WD [31:0] $end
$var wire 1 ? WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 3# RD [31:0] $end
$upscope $end
$upscope $end
$scope module stall $end
$var wire 1 E FlushE $end
$var wire 5 4# RD_E [4:0] $end
$var wire 5 5# RS1_D [4:0] $end
$var wire 5 6# RS2_D [4:0] $end
$var wire 1 ) ResultSrcE $end
$var wire 1 % StallD $end
$var wire 1 $ StallF $end
$var wire 1 7# lwStall $end
$upscope $end
$scope module write $end
$var wire 32 8# ALU_ResultW [31:0] $end
$var wire 32 9# PCPlus4W [31:0] $end
$var wire 32 :# ReadDataW [31:0] $end
$var wire 1 ' ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ;# ResultW [31:0] $end
$scope module dut_mux $end
$var wire 32 <# a [31:0] $end
$var wire 32 =# b [31:0] $end
$var wire 1 ' s $end
$var wire 32 ># c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
07#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
bx ##
bx "#
bx !#
bx ~"
b100 }"
bx |"
b0 {"
zz"
bx y"
bx x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
bx p"
b0 o"
bx n"
bx m"
b0 l"
1k"
1j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
0W"
0V"
b0 U"
b0 T"
b0 S"
b0 R"
b11111111111111111111111111111111 Q"
0P"
b0 O"
0N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
1>"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b11111 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
z$"
z#"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
0u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
0m
b0 l
b0 k
b0 j
0i
0h
b0 g
b0 f
b0 e
0d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
0]
0\
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
0I
b0 H
b0 G
0F
0E
b0 D
b0 C
b0 B
b0 A
0@
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
0,
0+
0*
0)
0(
0'
b0 &
0%
0$
b0 #
0"
1!
$end
#50
0!
#100
b100 m"
b100 x"
b100 "#
b100 n"
b100 y"
b100 ~"
b0 p"
b0 |"
b0 !#
b0 ##
1!
#150
0!
#200
1"
1!
#250
0!
#300
b10010010010010000011 r"
b10010010010010000011 {"
b1000 m"
b1000 x"
b1000 "#
b100 <
b100 b
b100 o"
b1000 n"
b1000 y"
b1000 ~"
b100 p"
b100 |"
b100 !#
b100 ##
b100 v"
1!
#350
0!
#400
1]
1i
1\
b1001101001000001010110011 r"
b1001101001000001010110011 {"
b10010 ("
b10 v
b10 |
b11 x
b11 ~
b11 %"
b10010 1
b10010 W
b10010 5#
b1100 m"
b1100 x"
b1100 "#
b1000 <
b1000 b
b1000 o"
b100 >
b100 c
b100 q"
b10010010010010000011 A
b10010010010010000011 e
b10010010010010000011 0"
b10010010010010000011 s"
b1100 n"
b1100 y"
b1100 ~"
b1000 p"
b1000 |"
b1000 !#
b1000 ##
b100 ;
b100 T
b100 7"
b100 o
b1000 v"
b100 u"
b10010010010010000011 t"
1!
#450
0!
#500
0i
b10011 f
b10011 1"
0\
b10 z
b10 !"
b10 '"
bx r"
bx {"
b10011 )"
b1001 ("
b0 v
b0 |
b110011 x
b110011 ~
b110011 %"
b10011 /
b10011 Y
b10011 6#
b1001 1
b1001 W
b1001 5#
0j"
0k"
b10000 m"
b10000 x"
b10000 "#
b1100 <
b1100 b
b1100 o"
b1000 >
b1000 c
b1000 q"
b1001101001000001010110011 A
b1001101001000001010110011 e
b1001101001000001010110011 0"
b1001101001000001010110011 s"
1$
1%
1E
17#
b10000 n"
b10000 y"
b10000 ~"
b1100 p"
b1100 |"
b1100 !#
b1100 ##
b1100 v"
b1000 u"
b1001101001000001010110011 t"
b10010 0
b10010 L
b10010 X
b10010 s
b1000 ;
b1000 T
b1000 7"
b1000 o
b100 7
b100 D"
b100 _"
b100 l"
b100 w"
b100 =
b100 S
b100 n
b100 6"
b100 ]"
b1001 4
b1001 _
b1001 r
b1001 ;"
b1001 4#
1I
1)
1,
1u
b100 :
b100 8"
b100 &#
b100 F"
1!
#550
0!
#600
1j"
1k"
1(
0$
0%
0E
07#
b100 9
b100 '#
b100 9#
b100 .#
b1000 :
b1000 8"
b1000 &#
b1000 F"
b1001 3
b1001 N
b1001 <"
b1001 H"
b1001 (#
b1 I"
1+
b0 0
b0 L
b0 X
b0 s
b0 ;
b0 T
b0 7"
b0 o
b0 7
b0 D"
b0 _"
b0 l"
b0 w"
b0 =
b0 S
b0 n
b0 6"
b0 ]"
b0 4
b0 _
b0 r
b0 ;"
b0 4#
0I
0)
0,
0u
1!
#650
0!
#700
x]
bx j
bx {
bx ""
bx `
bx +"
bx a
bx ,"
xi
b1 D
b1 P
b1 3"
b1 b"
bx f
bx 1"
xd
x\
xh
bx g
bx y
bx &"
bx /"
bx z
bx !"
bx '"
bx )"
bx ("
bx w
bx }
bx v
bx |
bx x
bx ~
bx %"
bx /
bx Y
bx 6#
bx 1
bx W
bx 5#
b10100 m"
b10100 x"
b10100 "#
b10000 <
b10000 b
b10000 o"
b1100 >
b1100 c
b1100 q"
bx A
bx e
bx 0"
bx s"
0(
b10100 n"
b10100 y"
b10100 ~"
b10000 p"
b10000 |"
b10000 !#
b10000 ##
b10000 v"
b1100 u"
bx t"
b10011 .
b10011 K
b10011 Z
b10011 t
b1001 0
b1001 L
b1001 X
b1001 s
b1100 ;
b1100 T
b1100 7"
b1100 o
b1000 =
b1000 S
b1000 n
b1000 6"
b1000 ]"
b101 4
b101 _
b101 r
b101 ;"
b101 4#
b11011 7
b11011 D"
b11011 _"
b11011 l"
b11011 w"
b10011 B
b10011 R
b10011 l
b10011 5"
b10011 Z"
b10011 ^"
1,
1u
b0 :
b0 8"
b0 &#
b0 F"
b0 3
b0 N
b0 <"
b0 H"
b0 (#
b0 I"
0+
b1000 9
b1000 '#
b1000 9#
b1000 .#
b1001 2
b1001 M
b1001 ^
b1001 -"
b1001 )#
b1001 /#
1'
1*
1!
#750
0!
#800
bx L"
xP"
bx A"
bx Y"
bx c"
bx0 C
bx0 O
bx0 4"
bx0 g"
bx0 D
bx0 P
bx0 3"
bx0 b"
x>"
xW"
b0x S"
bx B"
bx O"
bx T"
xN"
bx U"
bx Q"
bx M"
bx R"
xV"
bx @"
bx X"
bx ["
xj"
xk"
bx m"
bx x"
bx "#
bx ?"
bx \"
bx h"
x8
x$
x%
xE
x7#
b10100 <
b10100 b
b10100 o"
b10000 >
b10000 c
b10000 q"
b11000 n"
b11000 y"
b11000 ~"
b10100 p"
b10100 |"
b10100 !#
b10100 ##
b0 9
b0 '#
b0 9#
b0 .#
b0 2
b0 M
b0 ^
b0 -"
b0 )#
b0 /#
0'
0*
b1100 :
b1100 8"
b1100 &#
b1100 F"
b101 3
b101 N
b101 <"
b101 H"
b101 (#
1+
bx .
bx K
bx Z
bx t
bx 0
bx L
bx X
bx s
b10000 ;
b10000 T
b10000 7"
b10000 o
b1100 =
b1100 S
b1100 n
b1100 6"
b1100 ]"
bx 4
bx _
bx r
bx ;"
bx 4#
bx 7
bx D"
bx _"
bx l"
bx w"
bx B
bx R
bx l
bx 5"
bx Z"
bx ^"
bx 5
bx V
bx q
bx :"
bx e"
bx 6
bx U
bx p
bx 9"
bx `"
bx J
bx Q
bx k
bx 2"
bx K"
xF
xI
x)
x@
xm
x,
xu
b10100 v"
b10000 u"
1!
#850
0!
#900
bx C
bx O
bx 4"
bx g"
bx D
bx P
bx 3"
bx b"
bx ,#
bx 3#
x(
b10100 ;
b10100 T
b10100 7"
b10100 o
b10000 =
b10000 S
b10000 n
b10000 6"
b10000 ]"
bx H
bx E"
bx J"
bx a"
bx f"
bx $#
bx 1#
b10000 :
b10000 8"
b10000 &#
b10000 F"
bx #
bx ="
bx +#
bx 2#
bx G"
bx 3
bx N
bx <"
bx H"
bx (#
b0x I"
x?
x+
b1100 9
b1100 '#
b1100 9#
b1100 .#
b101 2
b101 M
b101 ^
b101 -"
b101 )#
b101 /#
1*
1!
#950
0!
#1000
bx &
bx [
bx *"
bx C"
bx d"
bx i"
bx ;#
bx >#
bx -
bx *#
bx 0#
bx :#
bx =#
bx G
bx %#
bx -#
bx 8#
bx <#
b10000 9
b10000 '#
b10000 9#
b10000 .#
bx 2
bx M
bx ^
bx -"
bx )#
bx /#
x'
x*
b10100 :
b10100 8"
b10100 &#
b10100 F"
1!
#1050
0!
#1100
b10100 9
b10100 '#
b10100 9#
b10100 .#
1!
#1150
0!
#1200
1!
#1250
0!
#1300
1!
#1350
0!
#1400
1!
#1450
0!
#1500
1!
#1550
0!
#1600
1!
